AWSTemplateFormatVersion: '2010-09-09'

Description: AWS API Gateway with a Lambda Integration -> DynamoDB 

Parameters:
  lambdaFunctionName:
    Type: "String"
    AllowedPattern: "^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$"
    Description: Lambda function name. (Recommend to keep default)
    Default: "lambda-api"
  apiStageName:
    Type: "String"
    Description: API Staging Name. (Recommend to keep default)
    Default: "v1"
  apiResourcePath:
    Type: "String"
    Description: Resource Path for API.
    Default: "path"

Resources:

  DDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: counter
          AttributeType: 'N'
      KeySchema:
        - AttributeName: counter
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: visitors
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 58ef4a09-5e6b-4490-97de-c91674840f98

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: An API Gateway for Lambda APIs
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Join ["", [{"Ref": "AWS::StackName"}, "-api"]]
  GatewayResponses4xx:
    Type: AWS::ApiGateway::GatewayResponse
    Properties: 
      ResponseParameters: 
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      ResponseType: DEFAULT_4XX
      RestApiId: !Ref ApiGatewayRestApi
      # StatusCode: String

  ProxyResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: !Ref "apiResourcePath"

  ProxyResourceANY:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ProxyResource
      HttpMethod: GET
      ApiKeyRequired: false
      AuthorizationType: NONE
      OperationName: !Ref "apiResourcePath"
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations'

  ApiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref ApiGatewayRestApi
      Schema: {}

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      Description: Lambda API Stage v1
      RestApiId: !Ref ApiGatewayRestApi
      StageName: !Ref "apiStageName"

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: 
      - ProxyResourceANY
    Properties:
      Description: Lambda API Deployment
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: !GetAtt LambdaFunction.Arn
  
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3

          def lambda_handler(event, context):
              dynamodb = boto3.client('dynamodb')
              dynamodb.update_item(
                  TableName="visitors",
                  Key={ "counter": { 'N': "0" } },
                  ExpressionAttributeValues={ ":inc": {'N': "1"} },
                  UpdateExpression="ADD visitor :inc"
              )
              response = dynamodb.get_item(TableName='visitors', Key={'counter':{'N': "0"}})
              n = response['Item']['visitor']['N']
              return {
                  'statusCode': 200,
                  'headers': {
                      'Access-Control-Allow-Headers': '*',
                      'Access-Control-Allow-Origin': '*',
                      'Access-Control-Allow-Methods': '*'
                  },
                  'body': json.dumps(n)
              }
      Description: API Lambda function
      FunctionName: !Ref "lambdaFunctionName"
      Handler: index.lambda_handler
      MemorySize: 512
      Role: !GetAtt LambdaIamRole.Arn
      Runtime: python3.8
      Timeout: 60

  LambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: !Join ["", [{"Ref": "AWS::StackName"}, "-lambda-log"]]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambdaFunctionName}:*"
          PolicyName: !Join ["", [{"Ref": "AWS::StackName"}, "-lambda-log"]]
        - PolicyName: "Inline-Policy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - dynamodb:DescribeTable
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:UpdateTable
                Effect: Allow
                Resource:
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/visitors

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: 'apigateway.amazonaws.com'

  LambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${lambdaFunctionName}"
      RetentionInDays: 3
  ApiUsagePlan:
    Type: "AWS::ApiGateway::UsagePlan"
    DependsOn: ApiGatewayStage
    Properties:
      ApiStages: 
      - ApiId: !Ref ApiGatewayRestApi
        Stage: !Ref "apiStageName"    
      Description: !Join [" ", [{"Ref": "AWS::StackName"}, "usage plan"]]
      UsagePlanName: !Join ["", [{"Ref": "AWS::StackName"}, "-usage-plan"]]